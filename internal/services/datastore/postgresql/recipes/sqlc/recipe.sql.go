// Code generated by sqlc. DO NOT EDIT.
// source: recipe.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createRecipe = `-- name: CreateRecipe :one
INSERT INTO recipes (
    author, ingredients, steps
) VALUES (
             $1, $2, $3
         )
RETURNING id, author, ingredients, steps, created_at, updated_at
`

type CreateRecipeParams struct {
	Author      string   `json:"author"`
	Ingredients []string `json:"ingredients"`
	Steps       []string `json:"steps"`
}

func (q *Queries) CreateRecipe(ctx context.Context, arg CreateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, createRecipe, arg.Author, pq.Array(arg.Ingredients), pq.Array(arg.Steps))
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Author,
		pq.Array(&i.Ingredients),
		pq.Array(&i.Steps),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRecipe = `-- name: DeleteRecipe :exec
DELETE FROM recipes
WHERE id = $1
`

func (q *Queries) DeleteRecipe(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRecipe, id)
	return err
}

const getRecipe = `-- name: GetRecipe :one
SELECT id, author, ingredients, steps, created_at, updated_at FROM recipes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRecipe(ctx context.Context, id int64) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, getRecipe, id)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Author,
		pq.Array(&i.Ingredients),
		pq.Array(&i.Steps),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRecipes = `-- name: ListRecipes :many
SELECT id, author, ingredients, steps, created_at, updated_at FROM recipes
WHERE author = $1
ORDER BY id
LIMIT $2
    OFFSET $3
`

type ListRecipesParams struct {
	Author string `json:"author"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListRecipes(ctx context.Context, arg ListRecipesParams) ([]Recipe, error) {
	rows, err := q.db.QueryContext(ctx, listRecipes, arg.Author, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Recipe{}
	for rows.Next() {
		var i Recipe
		if err := rows.Scan(
			&i.ID,
			&i.Author,
			pq.Array(&i.Ingredients),
			pq.Array(&i.Steps),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRecipe = `-- name: UpdateRecipe :one
UPDATE recipes SET (ingredients, steps, updated_at) = ($2, $3, $4)
WHERE id = $1
RETURNING id, author, ingredients, steps, created_at, updated_at
`

type UpdateRecipeParams struct {
	ID          int64     `json:"id"`
	Ingredients []string  `json:"ingredients"`
	Steps       []string  `json:"steps"`
	UpdatedAt   time.Time `json:"updated_at"`
}

func (q *Queries) UpdateRecipe(ctx context.Context, arg UpdateRecipeParams) (Recipe, error) {
	row := q.db.QueryRowContext(ctx, updateRecipe,
		arg.ID,
		pq.Array(arg.Ingredients),
		pq.Array(arg.Steps),
		arg.UpdatedAt,
	)
	var i Recipe
	err := row.Scan(
		&i.ID,
		&i.Author,
		pq.Array(&i.Ingredients),
		pq.Array(&i.Steps),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
