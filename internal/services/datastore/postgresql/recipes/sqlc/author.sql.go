// Code generated by sqlc. DO NOT EDIT.
// source: author.sql

package db

import (
	"context"
)

const createAuthor = `-- name: CreateAuthor :one
INSERT INTO authors (
    username, hashed_password, email
) VALUES (
             $1, $2, $3
         )
RETURNING username, hashed_password, email, created_at, updated_at
`

type CreateAuthorParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, createAuthor, arg.Username, arg.HashedPassword, arg.Email)
	var i Author
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors
WHERE username = $1
`

func (q *Queries) DeleteAuthor(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, username)
	return err
}

const getAuthor = `-- name: GetAuthor :one
SELECT username, hashed_password, email, created_at, updated_at FROM authors
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetAuthor(ctx context.Context, username string) (Author, error) {
	row := q.db.QueryRowContext(ctx, getAuthor, username)
	var i Author
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT username, hashed_password, email, created_at, updated_at FROM authors
ORDER BY username
LIMIT $1
OFFSET $2
`

type ListAuthorsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Author{}
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.Username,
			&i.HashedPassword,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :one
UPDATE authors SET email = $2
WHERE username = $1
RETURNING username, hashed_password, email, created_at, updated_at
`

type UpdateAuthorParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, updateAuthor, arg.Username, arg.Email)
	var i Author
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
